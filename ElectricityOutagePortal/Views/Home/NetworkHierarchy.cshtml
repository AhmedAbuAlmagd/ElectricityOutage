@model ElectricityOutagePortal.ViewModels.NetworkHierarchyViewModel
@{
    ViewData["Title"] = "Network Hierarchy";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12 text-center">
            <div class="portal-header">
                <h2 class="portal-title">Network Hierarchy</h2>
            </div>
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="nav-buttons">
                <button type="button" class="btn btn-outline-primary" onclick="location.href='@Url.Action("Index")'">
                    <i class="fas fa-search"></i> Search
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="location.href='@Url.Action("IgnoredOutages")'">
                    <i class="fas fa-eye-slash"></i> Ignored Outages
                </button>
                <button type="button" class="btn btn-info active">
                    <i class="fas fa-plus"></i> Add
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left Panel - Network Hierarchy Tree -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Network Hierarchy</h5>
                </div>
                <div class="card-body">
                    <!-- Search in Tree -->
                    <div class="mb-3">
                        <input type="text" class="form-control" id="treeSearch" placeholder="Search in tree...">
                    </div>

                    <!-- Tree View -->
                    <div class="tree-container">
                        <div class="tree-view" id="networkTree">
                            @if (Model?.NetworkElements != null && Model.NetworkElements.Any())
                            {
                                @foreach (var element in Model.NetworkElements)
                                {
                                    @await Html.PartialAsync("_NetworkTreeNode", element)
                                }
                            }
                            else
                            {
                                <div class="text-muted">No network hierarchy data available</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panel - Search and Results -->
        <div class="col-md-8">
            <!-- Search Form -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Search Network Elements</h5>
                </div>
                <div class="card-body">
                    <form asp-action="NetworkHierarchy" method="post">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Network Element Type</label>
                                <select asp-for="NetworkElementTypeKey" class="form-select">
                                    <option value="">Please Select</option>
                                    @if (Model?.NetworkElementTypes != null)
                                    {
                                        @foreach (var type in Model.NetworkElementTypes)
                                        {
                                            <option value="@type.Network_Element_Type_Key" selected="@(Model.NetworkElementTypeKey == type.Network_Element_Type_Key)">@type.Network_Element_Type_Name</option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Search Value</label>
                                <input asp-for="SearchValue" class="form-control" placeholder="Enter search value" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Search
                                </button>
                                <button type="button" class="btn btn-secondary ms-2" onclick="clearForm()">
                                    <i class="fas fa-times"></i> Clear
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Search Results -->
            @if (Model?.SearchResults != null && Model.SearchResults.Any())
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Search Results (@Model.TotalItems items)</span>
                        <div class="export-buttons">
                            <button type="button" class="btn btn-success btn-sm">
                                <i class="fas fa-file-excel"></i> Export
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th><input type="checkbox" class="form-check-input" id="selectAllResults"></th>
                                        <th>Network Element ID</th>
                                        <th>Network Element Name</th>
                                        <th>Type</th>
                                        <th>Parent</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.SearchResults)
                                    {
                                        <tr>
                                            <td><input type="checkbox" class="form-check-input result-checkbox"></td>
                                            <td>@item.CuttingIncidentId</td>
                                            <td>@item.NetworkElement</td>
                                            <td>Network Element</td>
                                            <td>-</td>
                                            <td>
                                                @{
                                                    var status = item.Status ?? "";
                                                    var badgeClass = status.Equals("Active", StringComparison.OrdinalIgnoreCase) ? "bg-success" : "bg-secondary";
                                                }
                                                <span class="badge @badgeClass">@status</span>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-primary btn-sm" onclick="selectNetworkElement('@item.CuttingIncidentId', '@item.NetworkElement')">
                                                    <i class="fas fa-check"></i> Select
                                                </button>
                                                <button type="button" class="btn btn-info btn-sm" onclick="viewDetails('@item.CuttingIncidentId')">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="d-flex justify-content-between align-items-center p-3">
                            <div>
                                <form asp-action="NetworkHierarchy" method="post" class="d-inline">
                                    <input type="hidden" name="SearchValue" value="@Model.SearchValue" />
                                    <input type="hidden" name="NetworkElementTypeKey" value="@Model.NetworkElementTypeKey" />
                                    <input type="hidden" name="PageSize" value="@Model.PageSize" />
                                    <button class="btn btn-outline-secondary btn-sm" type="submit" name="PageNumber" value="@(Model.PageNumber - 1)" @(Model.PageNumber <= 1 ? "disabled" : "")>
                                        <i class="fas fa-chevron-left"></i> Prev
                                    </button>
                                </form>
                                <span class="mx-2">Page @Model.PageNumber of @Model.TotalPages</span>
                                <form asp-action="NetworkHierarchy" method="post" class="d-inline">
                                    <input type="hidden" name="SearchValue" value="@Model.SearchValue" />
                                    <input type="hidden" name="NetworkElementTypeKey" value="@Model.NetworkElementTypeKey" />
                                    <input type="hidden" name="PageSize" value="@Model.PageSize" />
                                    <button class="btn btn-outline-secondary btn-sm" type="submit" name="PageNumber" value="@(Model.PageNumber + 1)" @(Model.PageNumber >= Model.TotalPages ? "disabled" : "")>
                                        Next <i class="fas fa-chevron-right"></i>
                                    </button>
                                </form>
                            </div>
                            <div>
                                <form asp-action="NetworkHierarchy" method="post" class="d-inline">
                                    <input type="hidden" name="SearchValue" value="@Model.SearchValue" />
                                    <input type="hidden" name="NetworkElementTypeKey" value="@Model.NetworkElementTypeKey" />
                                    <input type="hidden" name="PageNumber" value="@Model.PageNumber" />
                                    <label class="me-2">Page size</label>
                                    <select name="PageSize" class="form-select form-select-sm d-inline w-auto" onchange="this.form.submit()">
                                        <option value="10" @(Model.PageSize == 10 ? "selected" : "")>10</option>
                                        <option value="20" @(Model.PageSize == 20 ? "selected" : "")>20</option>
                                        <option value="50" @(Model.PageSize == 50 ? "selected" : "")>50</option>
                                    </select>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (ViewContext.HttpContext.Request.Method == "POST")
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> No network elements found for your search criteria.
                </div>
            }
        </div>
    </div>
</div>

<style>
    .portal-header {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .portal-title {
        margin: 0;
        font-weight: 600;
    }

    .nav-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
    }

    .nav-buttons .btn {
        border-radius: 20px;
        padding: 8px 20px;
        font-weight: 500;
    }

    .tree-container {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 10px;
    }

    .tree-view {
        font-family: 'Courier New', monospace;
        font-size: 14px;
    }

    .tree-node {
        margin: 2px 0;
        cursor: pointer;
        padding: 2px 5px;
        border-radius: 3px;
    }

    .tree-node:hover {
        background-color: #f8f9fa;
    }

    .tree-node.selected {
        background-color: #007bff;
        color: white;
    }

    .tree-toggle {
        cursor: pointer;
        user-select: none;
        margin-right: 5px;
    }

    .tree-children {
        margin-left: 20px;
    }

    .export-buttons {
        display: flex;
        gap: 5px;
    }

    .table th {
        background-color: #495057;
        color: white;
        border: none;
        font-weight: 500;
        padding: 12px 8px;
        font-size: 14px;
    }

    .table td {
        padding: 10px 8px;
        vertical-align: middle;
        font-size: 14px;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
        margin-right: 2px;
    }

    .card {
        border: none;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        font-weight: 600;
    }
</style>

<script>
    function clearForm() {
        document.querySelector('select[name="NetworkElementTypeKey"]').value = '';
        document.querySelector('input[name="SearchValue"]').value = '';
    }

    function selectNetworkElement(elementId, elementName) {
        // Implementation for selecting a network element
        alert('Selected: ' + elementName + ' (ID: ' + elementId + ')');
        // You can implement actual selection logic here
    }

    function viewDetails(elementId) {
        // Implementation for viewing network element details
        alert('Viewing details for element ID: ' + elementId);
        // You can implement modal or navigation to details page
    }

    // Tree search functionality
    document.getElementById('treeSearch')?.addEventListener('input', function() {
        var searchTerm = this.value.toLowerCase();
        var treeNodes = document.querySelectorAll('.tree-node');
        
        treeNodes.forEach(function(node) {
            var text = node.textContent.toLowerCase();
            if (text.includes(searchTerm) || searchTerm === '') {
                node.style.display = 'block';
            } else {
                node.style.display = 'none';
            }
        });
    });

    // Select all functionality for results
    document.getElementById('selectAllResults')?.addEventListener('change', function() {
        var checkboxes = document.querySelectorAll('.result-checkbox');
        checkboxes.forEach(function(checkbox) {
            checkbox.checked = this.checked;
        }, this);
    });

    // Tree node toggle functionality
    function toggleTreeNode(element) {
        var children = element.parentNode.querySelector('.tree-children');
        if (children) {
            if (children.style.display === 'none') {
                children.style.display = 'block';
                element.textContent = '▼';
            } else {
                children.style.display = 'none';
                element.textContent = '▶';
            }
        }
    }

    // Tree node selection
    function selectTreeNode(element) {
        // Remove previous selection
        document.querySelectorAll('.tree-node').forEach(function(node) {
            node.classList.remove('selected');
        });
        
        // Add selection to clicked node
        element.classList.add('selected');
    }
</script>